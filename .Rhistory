x=~bb1_id,y=~bb2_id,z=~bb3_id, size=~get(isize), color=~get(icolor),type = 'scatter3d',mode='markers',
marker=list(symbol='circle', sizemode='diameter'),
sizes=isizes
) %>%
colorbar(title = icolor) %>%
add_trace(type='mesh3d',
data=subsubset %>% filter(cluster==1),
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.1,
facecolor = rep("yellow", 1000),
opacity = 0.2,
alphahull=0)
subsubset %>% filter(cluster==1)
add_trace(type='mesh3d',
data=subsubset %>% filter(cluster==ihull),
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.01,
facecolor = rep("yellow", 1000),
opacity = 0.2,
alphahull=0)
plot_ly(type='mesh3d',
data=subsubset %>% filter(cluster==ihull),
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.01,
facecolor = rep("yellow", 1000),
opacity = 0.2,
alphahull=0)
plot_ly(mode='mesh3d',
data=subsubset %>% filter(cluster==ihull),
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.01,
facecolor = rep("yellow", 1000),
opacity = 0.2,
alphahull=0)
plot_ly(type='mesh3d',
data=subsubset %>% filter(cluster==ihull),
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.01,
facecolor = rep("yellow", 1000),
opacity = 0.2,
alphahull=0)
plot_ly(subset,
x=~bb1_id,y=~bb2_id,z=~bb3_id, size=~get(isize), color=~get(icolor),type = 'scatter3d',mode='markers',
marker=list(symbol='circle', sizemode='diameter'),
sizes=isizes
) %>%
colorbar(title = icolor) %>%
add_trace(type='mesh3d',
data=subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.1,
facecolor = rep("yellow", 1000),
opacity = 0.2,
alphahull=0)
plot_ly(subset,
x=~bb1_id,y=~bb2_id,z=~bb3_id, size=~get(isize), color=~get(icolor),type = 'scatter3d',mode='markers',
marker=list(symbol='circle', sizemode='diameter'),
sizes=isizes
) %>%
colorbar(title = icolor) %>%
add_trace(type='mesh3d',
data=subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.01,
facecolor = rep("yellow", 1000),
opacity = 0.2,
alphahull=0)
plot_ly(subset,
x=~bb1_id,y=~bb2_id,z=~bb3_id, size=~get(isize), color=~get(icolor),type = 'scatter3d',mode='markers',
marker=list(symbol='circle', sizemode='diameter'),
sizes=isizes
) %>%
colorbar(title = icolor) %>%
add_trace(type='mesh3d',
data=subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.01,
facecolor = rep("yellow", 1000),
opacity = 0.2,
alphahull=0,delaunayaxis ='y')
plot_ly(subset,
x=~bb1_id,y=~bb2_id,z=~bb3_id, size=~get(isize), color=~get(icolor),type = 'scatter3d',mode='markers',
marker=list(symbol='circle', sizemode='diameter'),
sizes=isizes
) %>%
colorbar(title = icolor) %>%
add_trace(type='mesh3d',
data=subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.01,
facecolor = rep("yellow", 1000),
opacity = 0.2,
alphahull=0,delaunayaxis ='z')
plot_ly(subset,
x=~bb1_id,y=~bb2_id,z=~bb3_id, size=~get(isize), color=~get(icolor),type = 'scatter3d',mode='markers',
marker=list(symbol='circle', sizemode='diameter'),
sizes=isizes
) %>%
colorbar(title = icolor) %>%
add_trace(type='mesh3d',
data=subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.01,
facecolor = rep("yellow", 1000),
opacity = 0.2,
alphahull=0,delaunayaxis ='x')
plot_ly(subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id, size=~get(isize), color=~get(icolor),type = 'scatter3d',mode='markers',
marker=list(symbol='circle', sizemode='diameter'),
sizes=isizes
) %>%
colorbar(title = icolor) %>%
add_trace(type='mesh3d',
data=subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.01,
facecolor = rep("yellow", 1000),
opacity = 0.2,
alphahull=0,delaunayaxis ='x')
plot_ly(subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id, size=~get(isize), color=~get(icolor),type = 'scatter3d',mode='markers',
marker=list(symbol='circle', sizemode='diameter'),
sizes=isizes
) %>%
colorbar(title = icolor) %>%
add_trace(type='mesh3d',
data=subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.01,
facecolor = rep("yellow", 1000))
plot_ly(subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id, size=~get(isize), color=~get(icolor),type = 'scatter3d',mode='markers',
marker=list(symbol='circle', sizemode='diameter'),
sizes=isizes
) %>%
colorbar(title = icolor) %>%
add_trace(type='mesh3d',
data=subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.01,
facecolor = rep("yellow", 1000),
opacity = 0.2,
alphahull=1)
plot_ly(subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id, size=~get(isize), color=~get(icolor),type = 'scatter3d',mode='markers',
marker=list(symbol='circle', sizemode='diameter'),
sizes=isizes
) %>%
colorbar(title = icolor) %>%
add_trace(type='mesh3d',
data=subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.01,
facecolor = rep("yellow", 1000),
opacity = 0.2)
plot_ly(subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id, size=~get(isize), color=~get(icolor),type = 'scatter3d',mode='markers',
marker=list(symbol='circle', sizemode='diameter'),
sizes=isizes
) %>%
colorbar(title = icolor) %>%
add_trace(type='mesh3d',
data=subsubset,
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.01,
facecolor = rep("yellow", 1000),
opacity = 0.2,
alphahull=-1)
#if they're all on a single plane, convex hull fails (though it shouldn't)
if (length(unique(subsubset$cluster))>1){ialphahull <- 0} else { ialpha_hull <- -1}
#if they're all on a single plane, convex hull fails (though it shouldn't)
if (length(unique(subsubset%>% filter(cluster==ihull) %>% pull(cluster)))>1){ialphahull <- 0} else { ialpha_hull <- -1}
plot_ly(subset,
x=~bb1_id,y=~bb2_id,z=~bb3_id, size=~get(isize), color=~get(icolor),type = 'scatter3d',mode='markers',
marker=list(symbol='circle', sizemode='diameter'),
sizes=isizes
) %>%
colorbar(title = icolor) %>%
add_trace(type='mesh3d',
data=subsubset %>% filter(cluster==ihull),
x=~bb1_id,y=~bb2_id,z=~bb3_id,
color=~get(icolor),
size=0.01,
facecolor = rep("yellow", 1000),
opacity = 0.2,
alphahull=ialphahull)
library(shiny)
library(shinythemes)
library(RColorBrewer)
library(Matrix)
library(plotly)
library(scales)
library(DT)
library(readr)
library(stringr)
library(tidyr)
library(shinyjs)
library(sortable)
library(tibble)
library(rclipboard)
library(dplyr)
library(DBI)
conn <<- dbConnect(drv = RPostgres::Postgres(),
#dbname='public',  #public_cnv
host='localhost',  #cnv_db
user='postgres',
password='password',
port=5432)
tdat <<- tbl(conn, 'cnv_main') %>% mutate(CNV=case_when(alteration<0~'Deletion', alteration>0~'Duplication'))
genes <<- tbl(conn, 'genes') %>% pull(genes)
dbListTables(conn)
nsamps <<- tbl(conn, 'cnv_nsamps') %>% select(cancer, nsamp) %>% distinct()
nsamps
nsamps <<- tbl(conn, 'cnv_nsamps')  %>% distinct()
nsampes
nsamps
nsamps <<- tbl(conn, 'cnv_nsamps') %>% select(cancer, nsamp) %>% distinct()
nsamps
dbListTables
dbListTables(conn)
tdat %>% filter(gene=='MARK2')
tdat %>% filter(gene=='MARK3')
dbListTables(conn)
for (i in c('a',b)){print(i)}
for (i in c('a','b')){print(i)}
any(c(T,F))
for (i in c(1,1,2,3,4,5,6,7,8,8)){print i}
for (i in c(1,1,2,3,4,5,6,7,8,8)){print(i)}
integer("31")
as.numeric("31")
iris
iris %>% arrange(Sepal.Length)
library(tidyverse)
iris %>% arrange(Sepal.Length)
iris %>% arrange(-Sepal.Length)
library(ggplot)
library(ggplot2)
library(tidyverse)
cars
cars %>% mutate(temp=case_when(dist<=30 ~'A', 30<dist<=60~"B", dist>60~"C"))
basename('out.gtf')
suffix('out.gtf')
remove_suffix('out.gtf')
gsrc::remove_suffix('out.gtf')
str_split('out.gtf', pattern='\\.')[[1]]
str_split('out.gtf', pattern='\\.')[[1]][1]
library(tidyverse)
library(tidyverse)
library(DESeq2)
library(RColorBrewer)
graph_single_gene <- function(gene, icounts, meta){
#df <- icounts[gene,] %>%
#  pivot_longer(cols=everything(), names_to='sample', values_to = 'counts') %>%
#  left_join(meta, by='sample')
df <- data.frame(counts=icounts[gene,], sample=names(icounts[gene,])) %>%
left_join(meta, by='sample') %>% group_by(individual)
ggplot(df)+
geom_jitter(mapping=aes(y=counts, x=individual, color=as.factor(treatment), shape=as.factor(treatment)),
width=0.1, height=0, size=3)+
ylab('Normalized Counts')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
ggtitle(paste0(gene, ' Normalized Counts'))+
theme_bw()
}
graph_library_sizes <- function(icounts, meta){
tmp <- data.frame(library_size= colSums(icounts[,2:length(icounts)], na.rm = T))
tmp$sample <- rownames(tmp)
tmp <- tmp %>% left_join(., meta, by="sample") %>%
group_by(individual, treatment) %>%
mutate(treatment = factor(treatment, levels=c("8","2.5","30","6","24","32","41")))
ggplot(tmp)+
geom_bar(mapping=aes(x=sample, y=library_size, fill=treatment), stat = 'identity')+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
scale_fill_manual(values =  c("#bdbdbd", brewer.pal(length(unique(tmp$treatment)) - 1 , "Paired")) )
}
graph_PCA <- function(icounts, imeta){
PCA <- princomp(counts)
PCA <- as.data.frame(PCA$loadings[,1:2])
PCA$sample <- rownames(PCA)
df <- left_join(imeta, PCA, by='sample') %>% mutate(treatment=factor(treatment))
ggplot(df)+
geom_text(mapping=aes(x=Comp.1, y=Comp.2, label=sample, color=treatment),
size=5)+
theme_bw()
}
setwd("~/Postdoc/Hindle/dylan/fibro")
#list all count matrices
fnames <- list.files('data/counts/full_transcript_counts/', full.names = T)
#read in
allcounts <- imap(fnames, read.csv)
names(allcounts) <- str_split_i(gsub("\\.csv", "", basename(fnames)), '_', 1)
#OPTIONALLY collapse transcripts to genes
allcounts <- allcounts %>% map( ~ mutate(.x, Transcript = str_split_i(Transcript, '\\.', 2)) %>%
group_by(Transcript) %>%
summarise_all(sum) %>%
ungroup())
allcounts$fruitbat <- allcounts$fruitbat %>% rename("RA142p30mMpRNAp1.18.24"="RA142p30mM") #stupid rename function
allcounts$squirrel <- allcounts$squirrel %>% rename("FIT60p24h"="FIT60p24H" ,
"FIT60p6h"= "FIT60p6H")
allcounts$rat <- allcounts$rat %>% rename("RN30.2.5.mM"="RN30.2.5mM" )
allcounts$human <- allcounts$human %>% select(-c(HS967.2.5mM)) #bad samples
allcounts$lbbat <- allcounts$lbbat %>% select(-c(PG554.8mM, PG556.6H))
allcounts$rat <- allcounts$rat %>% select(-c(RN28.8mM, RN28.32C, RN28.41C))
allcounts$squirrel <- allcounts$squirrel %>% select(-c(OK29.6H))
#make meta from sample names
cnames <- c()
for(i in 1:length(allcounts)){
cnames <- c(cnames, colnames(allcounts[[i]])[2:length(allcounts[[i]])])
}
meta <- tibble(sample=cnames) %>%
mutate(individual = str_split_i(sample, "\\.|p", 1)) %>%
mutate(exp_group = case_when(
str_sub(sample, -1, -1) == 'C' ~ "temperature",
str_sub(sample, -1, -1) == 'H' ~ "hypoxia",
str_sub(sample, -1, -1) == 'M' ~ "glucose",
.default = NA
)) %>%
mutate(treatment = case_when(
str_sub(sample, -3, -1) == '5mM' ~ 2.5,
str_sub(sample, -3, -1) == '8mM' ~ 8,
str_sub(sample, -4, -1) == '30mM' ~ 30,
str_sub(sample, -2, -1) == '6H' ~ 6,
str_sub(sample, -3, -1) == '24H' ~ 24,
str_sub(sample, -3, -1) == '32C' ~ 32,
str_sub(sample, -3, -1) == '41C' ~ 41,
.default = NA
))
treats <- c('glucose', 'hypoxia', 'temperature')
treatlevs <- list('glucose'=c(8,2.5,30), 'hypoxia'=c(8,6,24), 'temperature'=c(8, 32, 41))
for (i in 1:length(allcounts)){ #iter species
for (j in treats){ #iter treatment
if (nrow(meta %>% filter(sample %in% colnames(allcounts[[i]]), exp_group==j)) >0){ #make sure we have data for combo
print(paste0(names(allcounts[i]), " ", j))
counts <- as.data.frame(allcounts[[i]]) #format subset of counts for limma
rownames(counts) <- counts$Transcript
counts <- counts %>% select(-Transcript)
if (j=='glucose'){imeta <- meta %>% filter(sample %in% colnames(counts), exp_group==j) #subset meta
} else { imeta <- meta %>% filter(sample %in% colnames(counts), exp_group==j)
imeta <- rbind(imeta, meta %>% filter(sample %in% colnames(counts), treatment==8))} #get 8mM control
counts <- counts[,match(imeta$sample, colnames(counts))] #make absolute sure the cols and rows (samples) match order
counts[is.na(counts)] <- 0 #no NA (why would NA even be possible when 0 is?)
imeta$treatment <- factor(as.character(imeta %>% pull(treatment)),  levels =  treatlevs[[j]])
mincount <- 5
gidx <- rowSums( counts >= mincount ) >= 3
dds <- DESeqDataSetFromMatrix(countData = counts[gidx,],
colData = imeta,
design = ~individual + treatment)
dds <- estimateSizeFactors(dds)
dds <- DESeq(dds)
write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][2],"8"))%>% as.data.frame() %>% arrange(padj),
paste0('data/DESeq/', names(allcounts[i]), "_", j, "_low_DEG.csv") )
write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][3],"8"))%>% as.data.frame() %>% arrange(padj),
paste0('data/DESeq/', names(allcounts[i]), "_", j, "_high_DEG.csv") )
#print some stats along the way to make sure it's working
print(results(dds, contrast = c("treatment", treatlevs[[j]][2], "8"))  %>% as.data.frame() %>% arrange(padj) %>% head(n=3))
print(results(dds, contrast = c("treatment", treatlevs[[j]][2],"8"))  %>% as.data.frame() %>% filter(padj<0.05) %>% nrow())
print(results(dds, contrast = c("treatment", treatlevs[[j]][3], "8"))  %>% as.data.frame() %>% arrange(padj) %>% head(n=3))
print(results(dds, contrast = c("treatment", treatlevs[[j]][3],"8"))  %>% as.data.frame() %>% filter(padj<0.05) %>% nrow())
}
}
}
View(meta)
meta %>% filter(exp_group=='hypoxia')
meta %>% filter(exp_group=='glucose')
results(dds, contrast = c("treatment", treatlevs[[j]][2],"8"))%>% as.data.frame() %>% arrange(padj)
results(dds, contrast = c("treatment", treatlevs[[j]][2],"8"))%>% as.data.frame() %>% arrange(padj) %>% add_rownames('gene')
#do *only minimal* pre-processing, start with RAW COUNTS, don't forget 8mM glucose is control
i <- 1
j <- 'temperature'
print(paste0(names(allcounts[i]), " ", j))
counts <- as.data.frame(allcounts[[i]]) #format subset of counts for limma
rownames(counts) <- counts$Transcript
counts <- counts %>% select(-Transcript)
if (j=='glucose'){imeta <- meta %>% filter(sample %in% colnames(counts), exp_group==j) #subset meta
} else { imeta <- meta %>% filter(sample %in% colnames(counts), exp_group==j)
imeta <- rbind(imeta, meta %>% filter(sample %in% colnames(counts), treatment==8))} #get 8mM control
counts <- counts[,match(imeta$sample, colnames(counts))] #make absolute sure the cols and rows (samples) match order
counts[is.na(counts)] <- 0 #no NA (why would NA even be possible when 0 is?)
imeta$treatment <- factor(as.character(imeta %>% pull(treatment)),  levels =  treatlevs[[j]])
mincount <- 5
gidx <- rowSums( counts >= mincount ) >= 3
dds <- DESeqDataSetFromMatrix(countData = counts[gidx,],
colData = imeta,
design = ~individual + treatment)
dds <- estimateSizeFactors(dds)
dds <- DESeq(dds)
write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][2],"8"))%>%
as.data.frame() %>% arrange(padj) %>% add_rownames('gene'),
paste0('data/DESeq/', names(allcounts[i]), "_", j, "_",treatlevs[[j]][2],"v8_DEG.csv") )
results(dds, contrast = c("treatment", treatlevs[[j]][2],"8"))%>%
as.data.frame() %>% arrange(padj) %>% add_rownames('gene')
results(dds, contrast = c("treatment", treatlevs[[j]][2],"8"))%>%
as.data.frame() %>% arrange(padj) %>% rownames_to_column('gene')
write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][2],"8"))%>%
as.data.frame() %>% arrange(padj) %>% rownames_to_column('gene'),
paste0('data/DESeq/', names(allcounts[i]), "_", j, "_",treatlevs[[j]][2],"v8_DEG.csv") )
write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][3],"8"))%>%
as.data.frame() %>% arrange(padj) %>% rownames_to_column('gene'),
paste0('data/DESeq/', names(allcounts[i]), "_", j, "_",treatlevs[[j]][3],"v8_DEG.csv") )
write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][2],treatlevs[[j]][3]))%>%
as.data.frame() %>% arrange(padj) %>% rownames_to_column('gene'),
paste0('data/DESeq/', names(allcounts[i]), "_", j, "_",treatlevs[[j]][2],"v",treatlevs[[j]][3],"_DEG.csv") )
for (i in 1:length(allcounts)){ #iter species
for (j in treats){ #iter treatment
if (nrow(meta %>% filter(sample %in% colnames(allcounts[[i]]), exp_group==j)) >0){ #make sure we have data for combo
print(paste0(names(allcounts[i]), " ", j))
counts <- as.data.frame(allcounts[[i]]) #format subset of counts for limma
rownames(counts) <- counts$Transcript
counts <- counts %>% select(-Transcript)
if (j=='glucose'){imeta <- meta %>% filter(sample %in% colnames(counts), exp_group==j) #subset meta
} else { imeta <- meta %>% filter(sample %in% colnames(counts), exp_group==j)
imeta <- rbind(imeta, meta %>% filter(sample %in% colnames(counts), treatment==8))} #get 8mM control
counts <- counts[,match(imeta$sample, colnames(counts))] #make absolute sure the cols and rows (samples) match order
counts[is.na(counts)] <- 0 #no NA (why would NA even be possible when 0 is?)
imeta$treatment <- factor(as.character(imeta %>% pull(treatment)),  levels =  treatlevs[[j]])
mincount <- 5
gidx <- rowSums( counts >= mincount ) >= 3
dds <- DESeqDataSetFromMatrix(countData = counts[gidx,],
colData = imeta,
design = ~individual + treatment)
dds <- estimateSizeFactors(dds)
dds <- DESeq(dds)
write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][2],"8"))%>%
as.data.frame() %>% arrange(padj) %>% rownames_to_column('gene'),
paste0('data/DESeq/', names(allcounts[i]), "_", j, "_",treatlevs[[j]][2],"v8_DEG.csv") )
write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][3],"8"))%>%
as.data.frame() %>% arrange(padj) %>% rownames_to_column('gene'),
paste0('data/DESeq/', names(allcounts[i]), "_", j, "_",treatlevs[[j]][3],"v8_DEG.csv") )
write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][2],treatlevs[[j]][3]))%>%
as.data.frame() %>% arrange(padj) %>% rownames_to_column('gene'),
paste0('data/DESeq/', names(allcounts[i]), "_", j, "_",treatlevs[[j]][2],"v",treatlevs[[j]][3],"_DEG.csv") )
#print some stats along the way to make sure it's working
print(results(dds, contrast = c("treatment", treatlevs[[j]][2], "8"))  %>% as.data.frame() %>% arrange(padj) %>% head(n=3))
print(results(dds, contrast = c("treatment", treatlevs[[j]][2],"8"))  %>% as.data.frame() %>% filter(padj<0.05) %>% nrow())
print(results(dds, contrast = c("treatment", treatlevs[[j]][3], "8"))  %>% as.data.frame() %>% arrange(padj) %>% head(n=3))
print(results(dds, contrast = c("treatment", treatlevs[[j]][3],"8"))  %>% as.data.frame() %>% filter(padj<0.05) %>% nrow())
}
}
}
ncounts <- vst(dds)
ncounts %>% head()
ncounts
ncounts <- counts(dds, normalized=T)
ncoutns
ncounts
ncounts %>% rownames_to_column('gene')
as.data.frame(ncounts) %>% rownames_to_column('gene')
#write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][2],"8"))%>%
#            as.data.frame() %>% arrange(padj) %>% rownames_to_column('gene'),
#          paste0('data/DESeq/', names(allcounts[i]), "_", j, "_",treatlevs[[j]][2],"v8_DEG.csv") )
#write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][3],"8"))%>%
#            as.data.frame() %>% arrange(padj) %>% rownames_to_column('gene'),
#          paste0('data/DESeq/', names(allcounts[i]), "_", j, "_",treatlevs[[j]][3],"v8_DEG.csv") )
#write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][2],treatlevs[[j]][3]))%>%
#            as.data.frame() %>% arrange(padj) %>% rownames_to_column('gene'),
#          paste0('data/DESeq/', names(allcounts[i]), "_", j, "_",treatlevs[[j]][2],"v",treatlevs[[j]][3],"_DEG.csv") )
write_csv(as.data.frame(counts(dds, normalized=T)) %>% rownames_to_column('gene'),
paste0('data/normcounts/', names(allcounts[i]), "_normalized_counts.csv"))
for (i in 1:length(allcounts)){ #iter species
for (j in treats){ #iter treatment
if (nrow(meta %>% filter(sample %in% colnames(allcounts[[i]]), exp_group==j)) >0){ #make sure we have data for combo
print(paste0(names(allcounts[i]), " ", j))
counts <- as.data.frame(allcounts[[i]]) #format subset of counts for limma
rownames(counts) <- counts$Transcript
counts <- counts %>% select(-Transcript)
if (j=='glucose'){imeta <- meta %>% filter(sample %in% colnames(counts), exp_group==j) #subset meta
} else { imeta <- meta %>% filter(sample %in% colnames(counts), exp_group==j)
imeta <- rbind(imeta, meta %>% filter(sample %in% colnames(counts), treatment==8))} #get 8mM control
counts <- counts[,match(imeta$sample, colnames(counts))] #make absolute sure the cols and rows (samples) match order
counts[is.na(counts)] <- 0 #no NA (why would NA even be possible when 0 is?)
imeta$treatment <- factor(as.character(imeta %>% pull(treatment)),  levels =  treatlevs[[j]])
mincount <- 5
gidx <- rowSums( counts >= mincount ) >= 3
dds <- DESeqDataSetFromMatrix(countData = counts[gidx,],
colData = imeta,
design = ~individual + treatment)
dds <- estimateSizeFactors(dds)
dds <- DESeq(dds)
#write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][2],"8"))%>%
#            as.data.frame() %>% arrange(padj) %>% rownames_to_column('gene'),
#          paste0('data/DESeq/', names(allcounts[i]), "_", j, "_",treatlevs[[j]][2],"v8_DEG.csv") )
#write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][3],"8"))%>%
#            as.data.frame() %>% arrange(padj) %>% rownames_to_column('gene'),
#          paste0('data/DESeq/', names(allcounts[i]), "_", j, "_",treatlevs[[j]][3],"v8_DEG.csv") )
#write_csv(results(dds, contrast = c("treatment", treatlevs[[j]][2],treatlevs[[j]][3]))%>%
#            as.data.frame() %>% arrange(padj) %>% rownames_to_column('gene'),
#          paste0('data/DESeq/', names(allcounts[i]), "_", j, "_",treatlevs[[j]][2],"v",treatlevs[[j]][3],"_DEG.csv") )
write_csv(as.data.frame(counts(dds, normalized=T)) %>% rownames_to_column('gene'),
paste0('data/normcounts/', names(allcounts[i]), "_normalized_counts.csv"))
#print some stats along the way to make sure it's working
print(results(dds, contrast = c("treatment", treatlevs[[j]][2], "8"))  %>% as.data.frame() %>% arrange(padj) %>% head(n=3))
print(results(dds, contrast = c("treatment", treatlevs[[j]][2],"8"))  %>% as.data.frame() %>% filter(padj<0.05) %>% nrow())
print(results(dds, contrast = c("treatment", treatlevs[[j]][3], "8"))  %>% as.data.frame() %>% arrange(padj) %>% head(n=3))
print(results(dds, contrast = c("treatment", treatlevs[[j]][3],"8"))  %>% as.data.frame() %>% filter(padj<0.05) %>% nrow())
}
}
}
